{"/Users/geoffrey/Server/ripple/xrpl-dex-sdk/src/index.ts":{"path":"/Users/geoffrey/Server/ripple/xrpl-dex-sdk/src/index.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/geoffrey/Server/ripple/xrpl-dex-sdk/src/index.ts","sources":["/Users/geoffrey/Server/ripple/xrpl-dex-sdk/src/index.ts"],"names":[],"mappings":"","sourcesContent":[""]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d700f310b5f68a6a5dbf170effd038b159622a47","contentHash":"9ea463bcb187047442e933345365497a181113a52bd37c6046a504963bf8fac0"},"/Users/geoffrey/Server/ripple/xrpl-dex-sdk/src/methods/fetchStatus.ts":{"path":"/Users/geoffrey/Server/ripple/xrpl-dex-sdk/src/methods/fetchStatus.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":24},"end":{"line":8,"column":20}},"2":{"start":{"line":9,"column":17},"end":{"line":9,"column":21}},"3":{"start":{"line":10,"column":4},"end":{"line":11,"column":28}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":28}},"5":{"start":{"line":12,"column":21},"end":{"line":17,"column":5}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":20}},"7":{"start":{"line":20,"column":0},"end":{"line":20,"column":30}}},"fnMap":{"0":{"name":"fetchStatus","decl":{"start":{"line":4,"column":15},"end":{"line":4,"column":26}},"loc":{"start":{"line":4,"column":36},"end":{"line":19,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":4},"end":{"line":11,"column":28}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":11,"column":28}},{"start":{"line":10,"column":4},"end":{"line":11,"column":28}}],"line":10}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":1},"f":{"0":1},"b":{"0":[0,1]},"inputSourceMap":{"version":3,"file":"/Users/geoffrey/Server/ripple/xrpl-dex-sdk/src/methods/fetchStatus.ts","sources":["/Users/geoffrey/Server/ripple/xrpl-dex-sdk/src/methods/fetchStatus.ts"],"names":[],"mappings":";;AAGA,8DAA8D;AAC9D,KAAK,UAAU,WAAW,CAAe,OAA2B;IAClE,MAAM,WAAW,GAAG,CAClB,MAAM,IAAI,CAAC,OAAO,CAAC;QACjB,OAAO,EAAE,cAAc;QACvB,GAAG,OAAO,CAAC,MAAM;KAClB,CAAC,CACH,CAAC,MAAM,CAAC,KAAK,CAAC;IAEf,IAAI,MAAM,GAAuB,IAAI,CAAC;IAEtC,IAAI,WAAW,CAAC,YAAY,KAAK,cAAc;QAAE,MAAM,GAAG,UAAU,CAAC;IAErE,MAAM,QAAQ,GAAwB;QACpC,MAAM;QACN,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;QACrC,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;KACR,CAAC;IAEF,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,kBAAe,WAAW,CAAC","sourcesContent":["import { Client } from 'xrpl';\nimport { ExchangeStatusType, FetchStatusRequest, FetchStatusResponse } from '../models';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function fetchStatus(this: Client, request: FetchStatusRequest): Promise<FetchStatusResponse> {\n  const serverState = (\n    await this.request({\n      command: 'server_state',\n      ...request.params,\n    })\n  ).result.state;\n\n  let status: ExchangeStatusType = 'ok';\n\n  if (serverState.server_state === 'disconnected') status = 'shutdown';\n\n  const response: FetchStatusResponse = {\n    status,\n    updated: Date.parse(serverState.time),\n    eta: '',\n    url: '',\n  };\n\n  return response;\n}\n\nexport default fetchStatus;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"76abfae2f6461fb1716e4f16117894013d5e2202","contentHash":"94a416103f084be21664a88280c9aeea620accb471192acec84e78977d116242"}}